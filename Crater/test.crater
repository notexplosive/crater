local build_helpers = lib("build_helpers")
local string_util = lib("string_util")
local version = lib("version")

local git = {}

function git.hasRemote()
    local success, output = program.runSilent("git", { "remote" })
    assert(success, "git failed to run")

    if #output == 0 then
        return false
    else
        return true
    end
end

function git.isWorkspaceClean()
    local success, output = program.runSilent("git", { "status" })
    assert(success, "git failed to run")

    local commitLineIndex = 2

    if git.hasRemote() then
        commitLineIndex = 4
    end

    return string.match(output[commitLineIndex], "nothing to commit, working tree clean") ~= nil
end

function git.isUpToDateWithRemote()
    if not git.hasRemote() then
        return true
    end

    local success, output = program.runSilent("git", { "status" })

    assert(success, "git failed to run")

    return string.match(output[2], "Your branch is up to date") ~= nil
end

print("has remote:", git.hasRemote())
print("up to date:", git.isUpToDateWithRemote())
print("clean     :", git.isWorkspaceClean())