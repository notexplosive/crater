local version = lib("version")
local dotnet = lib("dotnet")
local butler = lib("butler")
local git = lib("git")
local table_util = lib("table_util")

local outputDirectory = ".build"

local productionPath = files.homeDirectory() .. "Crater"

print("Copying library to local path")
files.copy("Library", files.localDirectory() .. "Library")

if string.match(files.localDirectory(), productionPath) then
    error(
            "You're running deploy from production, this will not work because crater will have to delete itself in the process")
end

assert(table_util, "You didn't have a Library before this run. Please run again")

local isLocal = table_util.contains(args, "--local")

if isLocal then
    print("LOCAL ONLY")
end

if not isLocal then
    assert(git.isWorkspaceClean(), "You have uncommitted changes")
end

print("Publishing")
dotnet.publish(".", outputDirectory)

print("Bumping Version")
local previousVersion = files.read("VERSION") or "1.0.0"
newVersion = version.bumpPatch(previousVersion)
print("New version is: " .. newVersion)
files.write("VERSION", newVersion)

print("Copying Version File")
files.copy("VERSION", outputDirectory)

if not isLocal then
    print("Uploading to itch")
    butler.push(outputDirectory, "notexplosive", "crater", "windows")
end

print("Deleting old production instance")
files.deleteDirectory(productionPath)

print("Copying new instance to production")
files.copy(".build", productionPath)

print("Copying new Library to production")
files.copy("Library", productionPath .. "/Library")

print("Copying new Scripts to production")
files.copy("Scripts", productionPath .. "/Scripts")

if not isLocal then
    program.run("crater", { "commit_and_push", "Bump version after deploy" })
end
